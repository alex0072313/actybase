<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Config;
use Storage;
use Image as IntervetionImage;
use App\Owner;

class File extends Model
{
    protected $fillable = ['name', 'alt', 'title', 'file', 'pos'];

    protected static $file;

    public static function boot()
    {
        self::creating(function ($file){
            if($file->file){
                self::$file = $file->file;

                $file->filename = self::$file->getClientOriginalName();
                $ex_cnt = File::where('filename', $file->filename)->get()->count();

                if($ex_cnt > 0){
                    $filename_without_ext = pathinfo($file->filename, PATHINFO_FILENAME);
                    $file->filename = $filename_without_ext .'('.($ex_cnt).').'.self::$file->getClientOriginalExtension();
                }

                unset($file->file);
            }
        });

        parent::boot(); // TODO: Change the autogenerated stub

        //После создания
        self::created(function ($file){
            return $file->saveFile();
        });

        //После удаления
        self::deleted(function ($file){
            return $file->deleteFile();
        });

    }

    public function owner()
    {
        return $this->hasOne(Owner::class, 'id', 'owner_id');
    }

    protected function saveFile(){
        $filename_without_ext = pathinfo($this->filename, PATHINFO_FILENAME);

        $dir = Config::get('file.owner.dir_name').'/'.($this->owner_id % 100).'/'.$this->owner_id.'/';
        $src_path = $dir . $this->filename;
        Storage::disk('src')->put($src_path, file_get_contents(self::$file->getRealPath()));
    }

    protected function deleteFile(){
        $filename_without_ext = pathinfo($this->filename, PATHINFO_FILENAME);

        //Удаляем оригинал
        $dir = Config::get('file.owner.dir_name').'/'.($this->owner_id % 100).'/'.$this->owner_id.'/';
        $src_path = $dir . $this->filename;
        Storage::disk('src')->delete($src_path);

    }


}
