<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use Config;
use Storage;
use Image as IntervetionImage;
use App\Owner;

class Image extends Model
{
    protected $fillable = ['name', 'alt', 'title', 'file', 'pos'];

    protected static $file;

    public static function boot()
    {
        self::creating(function ($image){
            if($image->file){
                self::$file = $image->file;

                $image->filename = uniqid('', true) . '.'.$image->file->getClientOriginalExtension();
                unset($image->file);
            }
        });

        parent::boot(); // TODO: Change the autogenerated stub

        //После создания
        self::created(function ($image){
            return $image->saveImage();
        });

        //После удаления
        self::deleted(function ($image){
            return $image->deleteImage();
        });

    }

    public function owner()
    {
        return $this->hasOne(Owner::class, 'id', 'owner_id');
    }

    public function th_url($th_num = ''){

        $th_dir = Config::get('image.owner.dir_name').'/'.($this->owner_id % 100).'/'.$this->owner_id.'/th'.$th_num.'/';

        $filename_without_ext = pathinfo($this->filename, PATHINFO_FILENAME);

        $th_image = $th_dir . $filename_without_ext . '.' . Config::get('image.owner.th.th'.$th_num.'.ext');

        if(Storage::disk('public')->exists($th_image)){
            return Storage::disk('public')->url($th_image);
        }

        return false;
    }

    protected function saveImage(){
        $filename_without_ext = pathinfo($this->filename, PATHINFO_FILENAME);

        $dir = Config::get('image.owner.dir_name').'/'.($this->owner_id % 100).'/'.$this->owner_id.'/';
        $src_path = $dir . $this->filename;

        //Оригинал
        Storage::disk('src')->put($src_path, (string) IntervetionImage::make(self::$file)->encode());
        $src_image = Storage::disk('src')->path($src_path);

        //Обработанные
        foreach (Config::get('image.owner.th') as $folder => $params){
            $ext = $params['ext'] ? $params['ext'] : self::$file->getClientOriginalExtension();
            $q = $params['q'] ? $params['q'] : 90;

            $th_path = $dir . '/' . $folder . '/' . $filename_without_ext . '.' . $ext;

            $image_prepare = IntervetionImage::make($src_image);
            if($params['w'] && $params['h']){
                $image_prepare->fit($params['w'], $params['h'], function ($constraint) {
                    $constraint->upsize();
                });
            }
            Storage::disk('public')->put($th_path, $image_prepare->encode($ext, $q));
        }
    }

    protected function deleteImage(){

        $filename_without_ext = pathinfo($this->filename, PATHINFO_FILENAME);

        //Удаляем оригинал
        $dir = Config::get('image.owner.dir_name').'/'.($this->owner_id % 100).'/'.$this->owner_id.'/';
        $src_path = $dir . $this->filename;
        Storage::disk('src')->delete($src_path);

        //Удаляем ресайзы
        foreach (Config::get('image.owner.th') as $folder => $params){
            $th_path = $dir . '/' . $folder . '/' . $filename_without_ext . '.' . $params['ext'];
            Storage::disk('public')->delete($th_path);
        }

    }


}
